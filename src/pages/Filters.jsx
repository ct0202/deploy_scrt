import React, { useState } from "react";
import {Button} from "../components/Button";
import { useNavigate } from "react-router-dom";

import DoubleRangeSlider from "../components/ui/DoubleRangeSlider";

function Filters() {
    const [selectedTargetGender, setSelectedTargetGender] = useState(null);
    const [selectedOption, setSelectedOption] = useState(null);
    const [selectedInterests, setSelectedInterests] = useState([]);
    const [dayLimit, setDayLimit] = useState(true);
    const navigate = useNavigate();

    const addInterest = (optionId) => {
        setSelectedInterests((prev) => prev.includes(optionId) ? prev.filter((id) => id !== optionId) : [...prev, optionId]);
    }

    const targetGenders = [
        { id: "male", label: "–ú—É–∂—á–∏–Ω–∞", emoji: "üë±üèª‚Äç‚ôÇÔ∏è" },
        { id: "female", label: "–ñ–µ–Ω—â–∏–Ω–∞", emoji: "üë±üèª‚Äç‚ôÄÔ∏è" },
        { id: "all", label: "–í—Å–µ—Ö", emoji: "üíï" },
    ];

    const interests = [
        { id: "Harry Potter", title: "Harry Potter" },
        { id: "–î–µ—Ç–∏ 90-x", title: "–î–µ—Ç–∏ 90-x" },
        { id: "–•–µ–≤–∏-–º–µ—Ç–∞–ª", title: "–•–µ–≤–∏-–º–µ—Ç–∞–ª" },
        { id: "–í–µ—á–µ—Ä–∏–Ω–∫–∏ –¥–æ–º–∞", title: "–í–µ—á–µ—Ä–∏–Ω–∫–∏ –¥–æ–º–∞" },
        { id: "–î–∂–∏–Ω —Å —Ç–æ–Ω–∏–∫–æ–º", title: "–î–∂–∏–Ω —Å —Ç–æ–Ω–∏–∫–æ–º" },
    ];

    const options = [
        {
            id: 1,
            title: "–§–ª–∏—Ä—Ç –∏ —Å–≤–∏–¥–∞–Ω–∏—è",
            description: "–•–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏—è –∏ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è",
            emoji: "üî•",
        },
        {
            id: 2,
            title: "–°–µ—Ä—å–µ—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            description: "–ù–∞–π—Ç–∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            emoji: "üíç",
        },
        {
            id: 3,
            title: "–î—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ",
            description:
                "–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö, –æ–±—â–∞—Ç—å—Å—è –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—Å—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö",
            emoji: "‚úåÔ∏è",
        },
        {
            id: 4,
            title: "–û–±–æ–≤—Å—ë–º –∏ –Ω–∏ –æ —á—ë–º",
            description: "–û–±—â–∞—Ç—å—Å—è, –¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏ –∏ –∏–¥—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            emoji: "ü•Ç",
        },
    ];

    return (
        <div className="w-[100%] h-[auto] pt-[70px] flex justify-center">

        <div className="h-[auto] flex flex-col justify-start items-start w-[343px]">

            <div className="w-full flex justify-between items-center">
                <div onClick={() => navigate("/Meet")}>
                    <img src="/icons/Button-back.svg" className="mt-3 w-[44px] h-[44px]"/>
                </div>
                <div>
                    <p className="text-white mt-3">–°–±—Ä–æ—Å–∏—Ç—å</p>
                </div>
            </div>

            <h1 className="font-raleway font-semibold mt-6 text-white text-[26px]">
                –§–∏–ª—å—Ç—Ä—ã
            </h1>
            <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                –ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            </h1>
            <div className="flex justify-start flex-wrap items-center gap-[16px] mt-[16px]">
                {targetGenders.map((gender) => (
                    <div
                        key={gender.id}
                        onClick={() => setSelectedTargetGender(gender.id)}
                        className={`w-[145px] h-[48px] rounded-[400px] flex justify-center items-center text-[18px] text-white gap-[8px] cursor-pointer transition-all 
            ${
                            selectedTargetGender === gender.id
                                ? "bg-[#043939] border-[1.5px] border-[#a1f69e]"
                                : "bg-[#022424] border border-transparent"
                        }`}
                    >
                        <span className="text-[24px]">{gender.emoji}</span>
                        <span>{gender.label}</span>
                    </div>
                ))}
            </div>


            <div className="flex flex-row justify-between items-center w-full">
                <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                    –í–æ–∑—Ä–∞—Å—Ç:
                </h1>
                <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                    18-80 –ª–µ—Ç
                </h1>
            </div>

            <div className="relative w-full">
                <DoubleRangeSlider
                    min={18}
                    max={80}
                    onChange={({ min, max }) => console.log(`min = ${min}, max = ${max}`)}
                />
            </div>

            <div className="flex flex-row justify-between items-center w-full">
                <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                    –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:
                </h1>
                <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                    0-100+–∫–º
                </h1>
            </div>

            <div className="relative w-full">
                <DoubleRangeSlider
                    min={0}
                    max={100}
                    onChange={({ min, max }) => console.log(`min = ${min}, max = ${max}`)}
                />
            </div>



            <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:
            </h1>
            <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                className="w-[343px] h-[64px] rounded-[8px] bg-[#022424] mt-4 pl-4 border border-[#233636] text-white outline-none focus:border-[#a1f69e]"
            />



            <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                –°—Ç–∞—Ç—É—Å:
            </h1>
            <div className="grid gric-cols-1 justify-start flex-wrap items-center gap-[16px] mt-[16px]">
                {options.map((option) => (
                    <div
                        key={option.id}
                        onClick={() => setSelectedOption(option.id)}
                        className={`w-[auto] p-3 h-[48px] rounded-[400px] flex items-center  text-white cursor-pointer transition-all 
                        ${
                            selectedOption === option.id
                                ? "bg-[#043939] border-[1.5px] border-[#a1f69e]"
                                : "bg-[#022424] border-[1px] border-[#233636]"
                        }`}
                    >
                        <span className="flex items-center justify-center text-[24px] w-[30px] ml-1 mr-1.5 text-center">
                          {option.emoji}
                        </span>
                        <span className={`w-[auto] text-[18px] font-normal`}>
                          {option.title}
                        </span>

                    </div>
                ))}
            </div>


            <h1 className="font-raleway font-semibold mt-[32px] text-white text-[20px]">
                –ò–Ω—Ç–µ—Ä–µ—Å—ã:
            </h1>
            <div className="flex flex-wrap  gap-[16px] mt-[16px]">
                {interests.map((option) => (
                    <div
                        key={option.id}
                        onClick={() => addInterest(option.id)}
                        className={`w-[auto] p-3 h-[48px] rounded-[400px] flex justify-center items-center text-[18px] font-light text-white gap-[8px] cursor-pointer transition-all 
            ${ selectedInterests.includes(option.id)
                            ? "bg-[#043939] border-[1.5px] border-[#a1f69e]"
                            : "bg-[#022424] border-[1px] border-[#233636]"
                        }`}
                    >
                        <span>{option.title}</span>
                    </div>
                ))}
            </div>



            <Button
                className={"mt-[37px] mb-6"}
            >
                –î–∞–ª–µ–µ
            </Button>

        </div>
        </div>
    );
}

export default Filters;
